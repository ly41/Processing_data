


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       **************************************************
    2 00000000         ;  Declarations for the interrupt handlers that are used
                        by the application.              
    3 00000000         ;  ±¾Ó¦ÓÃËùÓÃµ½µÄÉùÃ÷                                   
                           
    4 00000000         ;*******************************************************
                       **************************************************
    5 00000000                 EXTERN           OSRunning
    6 00000000                 EXTERN           OSPrioCur
    7 00000000                 EXTERN           OSPrioHighRdy
    8 00000000                 EXTERN           OSTCBCur
    9 00000000                 EXTERN           OSTCBHighRdy
   10 00000000                 EXTERN           OSIntNesting
   11 00000000                 EXTERN           OSIntExit
   12 00000000                 EXTERN           OSTaskSwHook
   13 00000000                 EXTERN           OsEnterSum
   14 00000000         
   15 00000000         
   16 00000000         ;*******************************************************
                       **************************************************
   17 00000000         ;  Declarations for the exported functions             
   18 00000000         ;  Êä³öÍâ²¿ÉùÃ÷                          
   19 00000000         ;*******************************************************
                       **************************************************
   20 00000000                 EXPORT           OSStartHighRdy
   21 00000000                 EXPORT           OSCtxSw
   22 00000000                 EXPORT           OSIntCtxSw
   23 00000000                 EXPORT           OSPendSV
   24 00000000                 EXPORT           OS_ENTER_CRITICAL
   25 00000000                 EXPORT           OS_EXIT_CRITICAL
   26 00000000                 EXPORT           intDisAll
   27 00000000         
   28 00000000         
   29 00000000         ;*******************************************************
                       **************************************************
   30 00000000         ;  Registers or macros used by this file                
                                       
   31 00000000         ;  ±¾ÎÄ¼þÓÃµ½µÄ¼Ä´æÆ÷ºÍºê                             
   32 00000000         ;*******************************************************
                       **************************************************      
                            
   33 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ;  Interrupt contro
                                                            l state  
   34 00000000         ;  register.
   35 00000000         ;  ÖÐ¶Ï¿ØÖÆ¼Ä´æÆ÷
   36 00000000         
   37 00000000 E000ED20 
                       NVIC_SYSPRI2
                               EQU              0xE000ED20  ;  System priority 
                                                            register (2)
   38 00000000         ;  ÏµÍ³ÓÅÏÈ¼¶¼Ä´æÆ÷£¨2£©
   39 00000000         
   40 00000000 FFFF0000 
                       NVIC_PENDSV_PRI
                               EQU              0xFFFF0000  ;  PendSV and syste
                                                            m tick priority



ARM Macro Assembler    Page 2 


   41 00000000         ;  (Both are lowest,0xff)  
   42 00000000         ;  Èí¼þÖÐ¶ÏºÍÏµÍ³½ÚÅÄÖÐ¶Ï
   43 00000000         ;  £¨¶¼Îª×îµÍ£¬0xff£©.
   44 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ;  Value to trigger
                                                             PendSV  
   45 00000000         ;  exception.´¥·¢Èí¼þÖÐ¶ÏµÄÖµ.
   46 00000000         
   47 00000000 00000000 
                       OS_CRITICAL_INT_PRIO
                               EQU              (0 << 5)    ;  Critical setions
                                                             manage prio. 
   48 00000000         ; (equal or bigger number managed) 
   49 00000000         ;  ÁÙ½ç´úÂë¹ÜÀíµÄÓÅÏÈ¼¶£¨ÊýÖµµÈÓÚ
   50 00000000                 PRESERVE8                    ;  »ò´óÓÚ±»¹ÜÀí£©
   51 00000000         
   52 00000000                 AREA             UCOSII_ASM, CODE, READONLY
   53 00000000                 THUMB
   54 00000000         
   55 00000000         ;*******************************************************
                       **************************************************
   56 00000000         ;** Function name:   OS_ENTER_CRITICAL
   57 00000000         ;** Descriptions:      Enter the critical section  ½øÈëÁ
                       Ù½çÇø                         
   58 00000000         ;** Input parameters:     None ÎÞ
   59 00000000         ;** Output parameters:     None ÎÞ
   60 00000000         ;** Returned value:   None ÎÞ
   61 00000000         ;*******************************************************
                       **************************************************
   62 00000000         OS_ENTER_CRITICAL
   63 00000000                 IF               OS_CRITICAL_INT_PRIO > 0
   71 00000000 B672            CPSID            I           ;  Disable all the 
                                                            interrupts
   72 00000002         ;  ½ûÄÜËùÓÐÖÐ¶Ï
   73 00000002 B406            PUSH             {R1,R2}
   74 00000004                 ENDIF
   75 00000004 492E            LDR              R1, =OsEnterSum ;  OsEnterSum++
                                                            
   76 00000006 780A            LDRB             R2, [R1]
   77 00000008 F102 0201       ADD              R2, R2, #1
   78 0000000C 700A            STRB             R2, [R1]
   79 0000000E BC06            POP              {R1,R2}
   80 00000010 4770            BX               LR
   81 00000012         
   82 00000012         
   83 00000012         ;*******************************************************
                       **************************************************
   84 00000012         ;** Function name:   OS_EXIT_CRITICAL
   85 00000012         ;** Descriptions:   Exit the critical section  ÍË³öÁÙ½çÇ
                       ø
   86 00000012         ;** Output parameters:     None ÎÞ
   87 00000012         ;** Input parameters:  None ÎÞ
   88 00000012         ;** Returned value:   None ÎÞ
   89 00000012         ;*******************************************************
                       **************************************************
   90 00000012         OS_EXIT_CRITICAL
   91 00000012 B406            PUSH             {R1, R2}
   92 00000014 492A            LDR              R1, =OsEnterSum ;  OsEnterSum--



ARM Macro Assembler    Page 3 


                                                            
   93 00000016 780A            LDRB             R2, [R1]
   94 00000018 F1A2 0201       SUB              R2, R2, #1
   95 0000001C 700A            STRB             R2, [R1]
   96 0000001E F04F 0100       MOV              R1,  #0
   97 00000022 2A00            CMP              R2,  #0     ;  if OsEnterSum=0,
                                                            enable 
   98 00000024         ;  interruptsÈç¹ûOsEnterSum=0£¬
   99 00000024                 IF               OS_CRITICAL_INT_PRIO > 0 
                                                            ;  ¿ªÖÐ¶Ï;
  102 00000024 F381 8810       MSREQ            PRIMASK, R1
  103 00000028                 ENDIF
  104 00000028 BC06            POP              {R1, R2}
  105 0000002A 4770            BX               LR
  106 0000002C         
  107 0000002C         
  108 0000002C         ;*******************************************************
                       **************************************************
  109 0000002C         ;** Function name:   OSStartHighRdy
  110 0000002C         ;** Descriptions:   Uses the context switcher  to cause 
                       the first task to start.
  111 0000002C         ;**                         Ê¹ÓÃµ÷¶ÈÆ÷ÔËÐÐµÚÒ»¸öÈÎÎñ   
  112 0000002C         ;** Input parameters:     None ÎÞ
  113 0000002C         ;** Output parameters:     None ÎÞ
  114 0000002C         ;** Returned value:   None ÎÞ
  115 0000002C         ;*******************************************************
                       **************************************************
  116 0000002C         OSStartHighRdy
  117 0000002C         
  118 0000002C 4C25            LDR              R4, =NVIC_SYSPRI2 ;  set the Pe
                                                            ndSV exception 
  119 0000002E         ;  priorityÉèÖÃPendSVÓÅÏÈ¼¶
  120 0000002E 4D26            LDR              R5, =NVIC_PENDSV_PRI
  121 00000030 6025            STR              R5, [R4]
  122 00000032         
  123 00000032 F04F 0400       MOV              R4, #0      ;  set the PSP to 0
                                                             for initial  
  124 00000036         ;  context switch call Ê¹PSPµÈÓÚ0
  125 00000036 F384 8809       MSR              PSP, R4
  126 0000003A         
  127 0000003A 4C24            LDR              R4, =OSRunning 
                                                            ;  OSRunning = TRUE
                                                            
  128 0000003C F04F 0501       MOV              R5, #1
  129 00000040 7025            STRB             R5, [R4]
  130 00000042         
  131 00000042 4C23            LDR              R4, =NVIC_INT_CTRL ;  trigger t
                                                            he PendSV exception
                                                            
  132 00000044         ;  ´¥·¢Èí¼þÖÐ¶Ï
  133 00000044 F04F 5580       LDR              R5, =NVIC_PENDSVSET
  134 00000048 6025            STR              R5, [R4]
  135 0000004A         
  136 0000004A B662            CPSIE            I           ;  enable interrupt
                                                            s at processor 
  137 0000004C         ;  levelÊ¹ÄÜËùÓÐÓÅÏÈ¼¶µÄÖÐ¶Ï
  138 0000004C         OSStartHang
  139 0000004C E7FE            B                OSStartHang
  140 0000004E         



ARM Macro Assembler    Page 4 


  141 0000004E         
  142 0000004E         ;*******************************************************
                       **************************************************
  143 0000004E         ;** Function name:   OSCtxSw
  144 0000004E         ;** Descriptions:      Perform a contex switch from task
                        level  ÈÎÎñ¼¶ÉÏÏÂÎÄÇÐ»»                          
  145 0000004E         ;** Input parameters:     None ÎÞ
  146 0000004E         ;** Output parameters:     None ÎÞ
  147 0000004E         ;** Returned value:   None ÎÞ        
  148 0000004E         ;*******************************************************
                       **************************************************
  149 0000004E         OSCtxSw
  150 0000004E B430            PUSH             {R4, R5}
  151 00000050 4C1F            LDR              R4, =NVIC_INT_CTRL ;  trigger t
                                                            he PendSV exception
                                                            
  152 00000052         ;  ´¥·¢Èí¼þÖÐ¶Ï
  153 00000052 F04F 5580       LDR              R5, =NVIC_PENDSVSET
  154 00000056 6025            STR              R5, [R4]
  155 00000058 BC30            POP              {R4, R5}
  156 0000005A 4770            BX               LR
  157 0000005C         
  158 0000005C         
  159 0000005C         ;*******************************************************
                       **************************************************
  160 0000005C         ;** Function name:   OSIntCtxSw
  161 0000005C         ;** Descriptions:      called by OSIntExit() when it det
                       ermines a context switch is needed as the
  162 0000005C         ;**                         result of an interrupt.
  163 0000005C         ;**                         ÖÐ¶Ï¼¶ÈÎÎñÇÐ»»              
                          
  164 0000005C         ;** Input parameters:     None ÎÞ
  165 0000005C         ;** Output parameters:     None ÎÞ
  166 0000005C         ;** Returned value:   None ÎÞ
  167 0000005C         ;*******************************************************
                       **************************************************
  168 0000005C         OSIntCtxSw
  169 0000005C B430            PUSH             {R4, R5}
  170 0000005E 4C1C            LDR              R4, =NVIC_INT_CTRL ;  trigger t
                                                            he PendSV exception
                                                            
  171 00000060         ;  ´¥·¢Èí¼þÖÐ¶Ï
  172 00000060 F04F 5580       LDR              R5, =NVIC_PENDSVSET
  173 00000064 6025            STR              R5, [R4]
  174 00000066 BC30            POP              {R4, R5}
  175 00000068 4770            BX               LR
  176 0000006A BF00            NOP
  177 0000006C         
  178 0000006C         
  179 0000006C         ;*******************************************************
                       **************************************************
  180 0000006C         ;** Function name:   OSPendSV
  181 0000006C         ;** Descriptions:      Used to cause a context switch ÓÃ
                       ÓÚÉÏÏÂÎÄÇÐ»»
  182 0000006C         ;** Input parameters:     None ÎÞ
  183 0000006C         ;** Output parameters:     None ÎÞ
  184 0000006C         ;** Returned value:   None ÎÞ
  185 0000006C         ;*******************************************************
                       **************************************************



ARM Macro Assembler    Page 5 


  186 0000006C         OSPendSV
  187 0000006C                 IF               OS_CRITICAL_INT_PRIO > 0 ;  dis
                                                            able interupt ½ûÄÜÖ
                                                            Ð¶Ï
  192 0000006C F3EF 8310       MRS              R3, PRIMASK
  193 00000070 B672            CPSID            I
  194 00000072                 ENDIF
  195 00000072         
  196 00000072         
  197 00000072 F3EF 8009       MRS              R0, PSP     ;  PSP is process s
                                                            tack pointer  
  198 00000076         ;  PSPÊÇÈÎÎñµÄ¶ÑÕ»Ö¸Õë
  199 00000076 B130            CBZ              R0, OSPendSV_nosave ;  skip reg
                                                            ister save the firs
                                                            t 
  200 00000078         ;  timeµÚÒ»´ÎÌø¹ý±£´æ
  201 00000078         
  202 00000078 F1A0 0020       SUB              R0, R0, #0x20 ;  save remaining
                                                             regs r4-11 on 
  203 0000007C         ;  process stack ±£´ær4-r11
  204 0000007C E880 0FF0       STM              R0, {R4-R11}
  205 00000080         
  206 00000080 4C14            LDR              R4, =OSTCBCur ;  OSTCBCur->OSTC
                                                            BStkPtr = SP;
  207 00000082 6824            LDR              R4, [R4]
  208 00000084 6020            STR              R0, [R4]    ;  R0 is SP of proc
                                                            ess being 
  209 00000086         ;  switched outR0ÊÇ±»ÇÐ»»¿ªµÄÈÎÎñ
  210 00000086         ;  µÄ¶ÑÕ»Ö¸Õë
  211 00000086         OSPendSV_nosave
  212 00000086 B500            PUSH             {R14}       ;  need to save LR 
                                                            exc_return 
  213 00000088         ;  value±£´æLR·µ»ØÖµ
  214 00000088         
  215 00000088 4813            LDR              R0, =OSTaskSwHook 
                                                            ;  OSTaskSwHook();
  216 0000008A 4780            BLX              R0
  217 0000008C F85D EB04       POP              {R14}
  218 00000090         
  219 00000090 4C12            LDR              R4, =OSPrioCur ;  OSPrioCur = O
                                                            SPrioHighRdy
  220 00000092 4D13            LDR              R5, =OSPrioHighRdy
  221 00000094 782E            LDRB             R6, [R5]
  222 00000096 7026            STRB             R6, [R4]
  223 00000098         
  224 00000098 4C0E            LDR              R4, =OSTCBCur ;  OSTCBCur  = OS
                                                            TCBHighRdy;
  225 0000009A 4E12            LDR              R6, =OSTCBHighRdy
  226 0000009C 6836            LDR              R6, [R6]
  227 0000009E 6026            STR              R6, [R4]
  228 000000A0         
  229 000000A0 6830            LDR              R0, [R6]    ;  SP = OSTCBHighRd
                                                            y->OSTCBStkPtr;
  230 000000A2 E890 0FF0       LDM              R0, {R4-R11} ;  restore r4-11 f
                                                            rom new process
  231 000000A6         ;  stack ´ÓÐÂÈÎÎñµÄ¶ÑÕ»»Ö¸´r4-r11
  232 000000A6 F100 0020       ADD              R0, R0, #0x20
  233 000000AA F380 8809       MSR              PSP, R0     ;  load PSP with ne
                                                            w process SP



ARM Macro Assembler    Page 6 


  234 000000AE         ;  ´ÓÐÂÈÎÎñµÄ¶ÑÕ»»Ö¸´PSP
  235 000000AE         
  236 000000AE F04E 0E04       ORR              LR, LR, #0x04 ;  ensure excepti
                                                            on return uses 
  237 000000B2         ;  PSPÈ·±£·µ»ØºóÊ¹ÓÃPSP
  238 000000B2         
  239 000000B2                 IF               OS_CRITICAL_INT_PRIO > 0 ;  res
                                                            tore interrupts »Ö¸
                                                            ´ÖÐ¶Ï  
  242 000000B2 F383 8810       MSR              PRIMASK, R3
  243 000000B6                 ENDIF
  244 000000B6         
  245 000000B6 4770            BX               LR          ; exception return 
                                                            will restore 
  246 000000B8         ;  remaining context 
  247 000000B8         ;  ·µ»ØÊ±»á»Ö¸´Ê£ÏÂµÄÉÏÏÂÎÄ
  248 000000B8 BF00            NOP
  249 000000BA         
  250 000000BA         
  251 000000BA         
  252 000000BA         ;*******************************************************
                       **************************************************
  253 000000BA         ;** Function name:      IntDisAll
  254 000000BA         ;** Descriptions: Disable all interrupts from the interr
                       upt controller  ¹Ø±ÕÖÐ¶Ï¿ØÖÆÆ÷µÄËùÓÐÖÐ¶Ï
  255 000000BA         ;** Input parameters: None ÎÞ
  256 000000BA         ;** Output parameters: None ÎÞ
  257 000000BA         ;** Returned value: None ÎÞ
  258 000000BA         ;*******************************************************
                       **************************************************
  259 000000BA         intDisAll
  260 000000BA B672            CPSID            I
  261 000000BC 4770            BX               LR
  262 000000BE         
  263 000000BE         
  264 000000BE 00 00           ALIGN
  265 000000C0         
  266 000000C0         
  267 000000C0                 END
              00000000 
              E000ED20 
              FFFF0000 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\object
\os_cpu_a.d -o.\object\os_cpu_a.o -IE:\work_sofeware\keil\ARM\RV31\INC -IE:\wor
k_sofeware\keil\ARM\CMSIS\Include -IE:\work_sofeware\keil\ARM\Inc\Luminary --li
st=.\comment\os_cpu_a.lst uCOS-II\Ports\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

OSCtxSw 0000004E

Symbol: OSCtxSw
   Definitions
      At line 149 in file uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 21 in file uCOS-II\Ports\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 0000005C

Symbol: OSIntCtxSw
   Definitions
      At line 168 in file uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 22 in file uCOS-II\Ports\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSPendSV 0000006C

Symbol: OSPendSV
   Definitions
      At line 186 in file uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 23 in file uCOS-II\Ports\os_cpu_a.asm
Comment: OSPendSV used once
OSPendSV_nosave 00000086

Symbol: OSPendSV_nosave
   Definitions
      At line 211 in file uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 199 in file uCOS-II\Ports\os_cpu_a.asm
Comment: OSPendSV_nosave used once
OSStartHang 0000004C

Symbol: OSStartHang
   Definitions
      At line 138 in file uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 139 in file uCOS-II\Ports\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 0000002C

Symbol: OSStartHighRdy
   Definitions
      At line 116 in file uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 20 in file uCOS-II\Ports\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_ENTER_CRITICAL 00000000

Symbol: OS_ENTER_CRITICAL
   Definitions
      At line 62 in file uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 24 in file uCOS-II\Ports\os_cpu_a.asm
Comment: OS_ENTER_CRITICAL used once
OS_EXIT_CRITICAL 00000012

Symbol: OS_EXIT_CRITICAL



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 90 in file uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 25 in file uCOS-II\Ports\os_cpu_a.asm
Comment: OS_EXIT_CRITICAL used once
UCOSII_ASM 00000000

Symbol: UCOSII_ASM
   Definitions
      At line 52 in file uCOS-II\Ports\os_cpu_a.asm
   Uses
      None
Comment: UCOSII_ASM unused
intDisAll 000000BA

Symbol: intDisAll
   Definitions
      At line 259 in file uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 26 in file uCOS-II\Ports\os_cpu_a.asm
Comment: intDisAll used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 33 in file uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 131 in file uCOS-II\Ports\os_cpu_a.asm
      At line 151 in file uCOS-II\Ports\os_cpu_a.asm
      At line 170 in file uCOS-II\Ports\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 44 in file uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 133 in file uCOS-II\Ports\os_cpu_a.asm
      At line 153 in file uCOS-II\Ports\os_cpu_a.asm
      At line 172 in file uCOS-II\Ports\os_cpu_a.asm

NVIC_PENDSV_PRI FFFF0000

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 40 in file uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 120 in file uCOS-II\Ports\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI2 E000ED20

Symbol: NVIC_SYSPRI2
   Definitions
      At line 37 in file uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 118 in file uCOS-II\Ports\os_cpu_a.asm
Comment: NVIC_SYSPRI2 used once
OS_CRITICAL_INT_PRIO 00000000

Symbol: OS_CRITICAL_INT_PRIO
   Definitions
      At line 47 in file uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 63 in file uCOS-II\Ports\os_cpu_a.asm
      At line 99 in file uCOS-II\Ports\os_cpu_a.asm
      At line 187 in file uCOS-II\Ports\os_cpu_a.asm
      At line 239 in file uCOS-II\Ports\os_cpu_a.asm

5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 11 in file uCOS-II\Ports\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSIntNesting 00000000

Symbol: OSIntNesting
   Definitions
      At line 10 in file uCOS-II\Ports\os_cpu_a.asm
   Uses
      None
Comment: OSIntNesting unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 6 in file uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 219 in file uCOS-II\Ports\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 7 in file uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 220 in file uCOS-II\Ports\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 5 in file uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 127 in file uCOS-II\Ports\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 8 in file uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 206 in file uCOS-II\Ports\os_cpu_a.asm
      At line 224 in file uCOS-II\Ports\os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 9 in file uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 225 in file uCOS-II\Ports\os_cpu_a.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: OSTaskSwHook
   Definitions
      At line 12 in file uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 215 in file uCOS-II\Ports\os_cpu_a.asm
Comment: OSTaskSwHook used once
OsEnterSum 00000000

Symbol: OsEnterSum
   Definitions
      At line 13 in file uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 75 in file uCOS-II\Ports\os_cpu_a.asm
      At line 92 in file uCOS-II\Ports\os_cpu_a.asm

9 symbols
356 symbols in table
