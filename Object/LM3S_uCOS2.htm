<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Object\LM3S_uCOS2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Object\LM3S_uCOS2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Fri Jun 09 22:35:14 2017
<BR><P>
<H3>Maximum Stack Usage =        600 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
taskForm &rArr; apsFSM &rArr; apsTxFSM &rArr; apsTxData &rArr; apsInjectTxPacket &rArr; apsRxFSM &rArr; usrRxPacketCallback &rArr; AnalysisPacket &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[24]">Reset_Handler</a>
 <LI><a href="#[17b]">__user_initial_stackheap</a>
 <LI><a href="#[c8]">OS_ENTER_CRITICAL</a>
 <LI><a href="#[c9]">OS_EXIT_CRITICAL</a>
 <LI><a href="#[148]">OSStartHighRdy</a>
 <LI><a href="#[145]">OSCtxSw</a>
 <LI><a href="#[143]">OSIntCtxSw</a>
 <LI><a href="#[7]">OSPendSV</a>
 <LI><a href="#[16a]">intDisAll</a>
 <LI><a href="#[5]">NmiSR</a>
 <LI><a href="#[6]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[78]">SSIDataPut</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">SSIDataPut</a><BR>
 <LI><a href="#[7a]">SSIDataGet</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7a]">SSIDataGet</a><BR>
 <LI><a href="#[8d]">UARTCharPut</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8d]">UARTCharPut</a><BR>
 <LI><a href="#[5]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NmiSR</a><BR>
 <LI><a href="#[6]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">IntDefaultHandler</a><BR>
 <LI><a href="#[3c]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">SysCtlDelay</a><BR>
 <LI><a href="#[86]">UARTConfigSetExpClk</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[86]">UARTConfigSetExpClk</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[c]">GPIO_Port_J_ISR</a> from evboard.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[6]">IntDefaultHandler</a> from startup.o(RESET) referenced 57 times from startup.o(RESET)
 <LI><a href="#[20]">Kitronix320x240x16_SSD2119ColorTranslate</a> from kitronix320x240x16_ssd2119_8bit.o(.text) referenced from kitronix320x240x16_ssd2119_8bit.o(.constdata)
 <LI><a href="#[21]">Kitronix320x240x16_SSD2119Flush</a> from kitronix320x240x16_ssd2119_8bit.o(.text) referenced from kitronix320x240x16_ssd2119_8bit.o(.constdata)
 <LI><a href="#[1d]">Kitronix320x240x16_SSD2119LineDrawH</a> from kitronix320x240x16_ssd2119_8bit.o(.text) referenced from kitronix320x240x16_ssd2119_8bit.o(.constdata)
 <LI><a href="#[1e]">Kitronix320x240x16_SSD2119LineDrawV</a> from kitronix320x240x16_ssd2119_8bit.o(.text) referenced from kitronix320x240x16_ssd2119_8bit.o(.constdata)
 <LI><a href="#[1b]">Kitronix320x240x16_SSD2119PixelDraw</a> from kitronix320x240x16_ssd2119_8bit.o(.text) referenced from kitronix320x240x16_ssd2119_8bit.o(.constdata)
 <LI><a href="#[1c]">Kitronix320x240x16_SSD2119PixelDrawMultiple</a> from kitronix320x240x16_ssd2119_8bit.o(.text) referenced from kitronix320x240x16_ssd2119_8bit.o(.constdata)
 <LI><a href="#[1f]">Kitronix320x240x16_SSD2119RectFill</a> from kitronix320x240x16_ssd2119_8bit.o(.text) referenced from kitronix320x240x16_ssd2119_8bit.o(.constdata)
 <LI><a href="#[5]">NmiSR</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7]">OSPendSV</a> from os_cpu_a.o(UCOSII_ASM) referenced from startup.o(RESET)
 <LI><a href="#[1a]">OSTaskSwHook</a> from os_cpu_c.o(.text) referenced from os_cpu_a.o(UCOSII_ASM)
 <LI><a href="#[139]">OS_TaskIdle</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[24]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[a]">Timer0B_ISR</a> from halstack.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[b]">Timer2B_ISR</a> from halstack.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[9]">UART0_ISR</a> from halstack.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[f]">WriteCommandEPI</a> from kitronix320x240x16_ssd2119_8bit.o(.text) referenced from kitronix320x240x16_ssd2119_8bit.o(.text)
 <LI><a href="#[11]">WriteCommandFPGA</a> from kitronix320x240x16_ssd2119_8bit.o(.text) referenced from kitronix320x240x16_ssd2119_8bit.o(.text)
 <LI><a href="#[23]">WriteCommandGPIO</a> from kitronix320x240x16_ssd2119_8bit.o(.text) referenced from kitronix320x240x16_ssd2119_8bit.o(.data)
 <LI><a href="#[e]">WriteDataEPI</a> from kitronix320x240x16_ssd2119_8bit.o(.text) referenced from kitronix320x240x16_ssd2119_8bit.o(.text)
 <LI><a href="#[10]">WriteDataFPGA</a> from kitronix320x240x16_ssd2119_8bit.o(.text) referenced from kitronix320x240x16_ssd2119_8bit.o(.text)
 <LI><a href="#[22]">WriteDataGPIO</a> from kitronix320x240x16_ssd2119_8bit.o(.text) referenced from kitronix320x240x16_ssd2119_8bit.o(.data)
 <LI><a href="#[25]">__main</a> from __main.o(!!!main) referenced from startup.o(RESET)
 <LI><a href="#[15]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[16]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[18]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[17]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[14]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[19]">isspace</a> from isspace.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[12]">taskForm</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[13]">taskStart</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[8]">tickISRHandler</a> from target.o(.text) referenced from startup.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[24]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))

<P><STRONG><a name="[25]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[26]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[28]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1b0]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1b1]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[29]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1b2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2a]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[16e]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1b3]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[34]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1b4]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1b5]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[2c]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1b6]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1b7]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1b8]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[2e]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1b9]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1ba]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2f]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1bb]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1bc]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[1bd]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1be]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1bf]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1c0]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1c1]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1c2]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1c3]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1c4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1c5]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[1c6]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1c7]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[39]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1c8]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1c9]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1ca]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1cb]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1cc]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[1cd]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[27]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1ce]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[31]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[33]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1cf]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[35]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1d0]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[185]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[38]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1d1]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3c]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinoutSet
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kitronix320x240x16_SSD2119Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaughterBoardTypeGet
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadPolled
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFPGADaughterLCDInterface
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSRAMDaughterLCDInterface
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPIOLCDInterface
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommandFPGA
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataFPGA
</UL>

<P><STRONG><a name="[192]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>

<P><STRONG><a name="[1d2]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[193]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[194]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlSleep
</UL>

<P><STRONG><a name="[1d3]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[1d4]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[3d]"></a>ssiInit</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, evboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ssiInit &rArr; GPIOPinTypeSSI
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIEnable
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIConfigSetExpClk
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbInit
</UL>

<P><STRONG><a name="[45]"></a>GPIOJ_IntInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, evboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOJ_IntInit
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntEnable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbInit
</UL>

<P><STRONG><a name="[49]"></a>evbRadioIntCallback</STRONG> (Thumb, 364 bytes, Stack size 160 bytes, evboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = evbRadioIntCallback &rArr; MemFree &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyRxCallback
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macRxCallback
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macRxBuffFull
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RXFIFO
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemFree
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemAlloc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Port_J_ISR
</UL>

<P><STRONG><a name="[c]"></a>GPIO_Port_J_ISR</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, evboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GPIO_Port_J_ISR &rArr; evbRadioIntCallback &rArr; MemFree &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrIntCallback
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntStatus
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntClear
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbRadioIntCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>SW_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, evboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SW_Init &rArr; GPIOPinTypeGPIOInput
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbInit
</UL>

<P><STRONG><a name="[56]"></a>LED_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, evboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LED_Init &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbInit
</UL>

<P><STRONG><a name="[57]"></a>evbInitRandomSeed</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, evboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evbInitRandomSeed
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerValueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbInit
</UL>

<P><STRONG><a name="[59]"></a>evbIntCallback</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, evboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = evbIntCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2B_ISR
</UL>

<P><STRONG><a name="[12d]"></a>evbPoll</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, evboard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyFSM
</UL>

<P><STRONG><a name="[5b]"></a>evbInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, evboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = evbInit &rArr; ssiInit &rArr; GPIOPinTypeSSI
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetMACTimer
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbInitRandomSeed
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOJ_IntInit
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetInit
</UL>

<P><STRONG><a name="[5d]"></a>evbLedSet</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, evboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evbLedSet
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepHandleRxPacket
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepFSM
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrRxPacketCallback
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetInit
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskForm
</UL>

<P><STRONG><a name="[5e]"></a>evbLedGet</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, evboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = evbLedGet
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepHandleRxPacket
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepFSM
</UL>

<P><STRONG><a name="[6d]"></a>halGetRandomByte</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, evboard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doIEEE_backoff
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitRadio
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macTxData
</UL>

<P><STRONG><a name="[5f]"></a>halSetRadioPANID</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, evboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = halSetRadioPANID &rArr; Write_RAM
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_RAM
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macWarmStartRadio
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halResetRadio
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSetPANID
</UL>

<P><STRONG><a name="[63]"></a>halSetRadioShortAddr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, evboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = halSetRadioShortAddr &rArr; Write_RAM
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_RAM
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macWarmStartRadio
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halResetRadio
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSetShortAddr
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macInitRadio
</UL>

<P><STRONG><a name="[64]"></a>halSetRadioIEEEAddress</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, evboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = halSetRadioIEEEAddress &rArr; Write_RAM
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetProcessorIEEEAddress
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_RAM
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitRadio
</UL>

<P><STRONG><a name="[1d5]"></a>halRfWaitForCrystalOscillator</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, evboard.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>halDisableRadio</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, evboard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halWaitMs
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halShutdown
</UL>

<P><STRONG><a name="[69]"></a>halSetChannel</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, evboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = halSetChannel &rArr; Write_ConfigureWord
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ConfigureWord
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macWarmStartRadio
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitRadio
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFSM
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSetChannel
</UL>

<P><STRONG><a name="[6b]"></a>halInitRadio</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, evboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = halInitRadio &rArr; halSetRadioIEEEAddress &rArr; Write_RAM
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halWaitMs
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halMACTimerNowDelta
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetMACTimer
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintROMString_func
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ConfigureWord
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Status
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetChannel
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetRadioIEEEAddress
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetRandomByte
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halResetRadio
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyFSM
</UL>

<P><STRONG><a name="[70]"></a>halResetRadio</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, evboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = halResetRadio &rArr; halInitRadio &rArr; halSetRadioIEEEAddress &rArr; Write_RAM
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halWaitMs
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitRadio
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetRadioShortAddr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetRadioPANID
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSendPacket
</UL>

<P><STRONG><a name="[71]"></a>halFlushRXFIFO</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, evboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = halFlushRXFIFO &rArr; Write_Command
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSendPacket
</UL>

<P><STRONG><a name="[72]"></a>doIEEE_backoff</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, evboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = doIEEE_backoff &rArr; halMACTimerNowDelta &rArr; halGetMACTimer &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halMACTimerNowDelta
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetMACTimer
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetRandomByte
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSendPacket
</UL>

<P><STRONG><a name="[73]"></a>halSendPacket</STRONG> (Thumb, 518 bytes, Stack size 32 bytes, evboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = halSendPacket &rArr; halResetRadio &rArr; halInitRadio &rArr; halSetRadioIEEEAddress &rArr; Write_RAM
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyTxStartCallBack
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyTxEndCallBack
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macTxCallback
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halMACTimerNowDelta
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetMACTimer
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_TXFIFO
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Status
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doIEEE_backoff
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halFlushRXFIFO
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halResetRadio
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyFSM
</UL>

<P><STRONG><a name="[79]"></a>wait</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, evbradio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Byte_RXFIFO
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_TXFIFO
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_RAM
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ConfigureWord
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Status
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RXFIFO
</UL>

<P><STRONG><a name="[51]"></a>Write_Command</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, evbradio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Write_Command
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Status
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSendPacket
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halFlushRXFIFO
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitRadio
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbRadioIntCallback
</UL>

<P><STRONG><a name="[6e]"></a>Read_Status</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, evbradio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Read_Status &rArr; Write_Command
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSendPacket
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitRadio
</UL>

<P><STRONG><a name="[6a]"></a>Write_ConfigureWord</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, evbradio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Write_ConfigureWord
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitRadio
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetChannel
</UL>

<P><STRONG><a name="[7b]"></a>Read_Byte_RXFIFO</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, evbradio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>

<P><STRONG><a name="[4b]"></a>Read_RXFIFO</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, evbradio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Read_RXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbRadioIntCallback
</UL>

<P><STRONG><a name="[74]"></a>Write_TXFIFO</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, evbradio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Write_TXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSendPacket
</UL>

<P><STRONG><a name="[61]"></a>Write_RAM</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, evbradio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Write_RAM
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetRadioIEEEAddress
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetRadioShortAddr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetRadioPANID
</UL>

<P><STRONG><a name="[7c]"></a>timer2Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, halstack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer2Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerPrescaleSet
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitMACTimer
</UL>

<P><STRONG><a name="[82]"></a>timer0Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, halstack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer0Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerPrescaleSet
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitMACTimer
</UL>

<P><STRONG><a name="[83]"></a>halInitMACTimer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, halstack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = halInitMACTimer &rArr; timer0Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[84]"></a>halInitUart</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, halstack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = halInitUart &rArr; GPIOPinTypeUART
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntDisable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFIFOLevelSet
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEnable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
</UL>

<P><STRONG><a name="[8b]"></a>halInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, halstack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = halInit &rArr; halInitUart &rArr; GPIOPinTypeUART
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitUart
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitMACTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetInit
</UL>

<P><STRONG><a name="[1d6]"></a>halGetch</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, halstack.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>halGetchRdy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, halstack.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>halPutch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, halstack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = halPutch
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT8_noleader
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintString
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintChar
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintROMString_func
</UL>

<P><STRONG><a name="[8e]"></a>halRawPut</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, halstack.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>

<P><STRONG><a name="[9]"></a>UART0_ISR</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, halstack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART0_ISR &rArr; isprint &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntStatus
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharsAvail
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGetNonBlocking
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isprint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>halShutdown</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, halstack.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntDisable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halDisableRadio
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aplShutdown
</UL>

<P><STRONG><a name="[96]"></a>halWarmstart</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, halstack.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macWarmStartRadio
</UL>

<P><STRONG><a name="[cd]"></a>halMacTicksToUs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, halstack.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aplMacTicksToUs
</UL>

<P><STRONG><a name="[5c]"></a>halGetMACTimer</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, halstack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = halGetMACTimer &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerValueGet
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepHandleRxPacket
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepFSM
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsTxData
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsTxFSM
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyTxStartCallBack
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macTxCallback
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halMACTimerNowDelta
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSendPacket
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doIEEE_backoff
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitRadio
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbInit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFSM
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macRxFSM
</UL>

<P><STRONG><a name="[6f]"></a>halMACTimerNowDelta</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, halstack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = halMACTimerNowDelta &rArr; halGetMACTimer &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetMACTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepFSM
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsTxFSM
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSendPacket
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doIEEE_backoff
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitRadio
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyFSM
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFSM
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macTxFSM
</UL>

<P><STRONG><a name="[cf]"></a>halUtilMemCopy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, halstack.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsFSM
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsRxBuffAdd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsInjectTxPacket
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkTxData
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntNewAddressMapEntry
</UL>

<P><STRONG><a name="[65]"></a>halGetProcessorIEEEAddress</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, halstack.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepFmtNodeInfoRsp
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepFmtEndDeviceAnnounce
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aplFmtSendMSG
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintConfig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetRadioIEEEAddress
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntAddOurselvesToAddressTable
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macTxData
</UL>

<P><STRONG><a name="[68]"></a>halWaitMs</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, halstack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = halWaitMs
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halResetRadio
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitRadio
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halDisableRadio
</UL>

<P><STRONG><a name="[12e]"></a>halIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, halstack.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyFSM
</UL>

<P><STRONG><a name="[97]"></a>halSleep</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, halstack.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlSleep
</UL>

<P><STRONG><a name="[a]"></a>Timer0B_ISR</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, halstack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer0B_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>Timer2B_ISR</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, halstack.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timer2B_ISR &rArr; evbIntCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrSlowTimerInt
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbIntCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[17b]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1d8]"></a>BOOLToggle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>LCD_Init</STRONG> (Thumb, 544 bytes, Stack size 40 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = LCD_Init &rArr; PinoutSet &rArr; EPIPinConfigSet &rArr; CalcEPIDivider &rArr; EPIDividerFromRate
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinoutSet
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kitronix320x240x16_SSD2119Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrStringWidthGet
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrStringDraw
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrRectFill
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrRectDraw
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrContextInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetInit
</UL>

<P><STRONG><a name="[a4]"></a>lcd</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = lcd &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrStringWidthGet
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrStringDraw
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datajudge
</UL>

<P><STRONG><a name="[a5]"></a>SendToUP210</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = SendToUP210 &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintString
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datajudge
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string2
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string
</UL>

<P><STRONG><a name="[a7]"></a>string</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, target.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToUP210
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lockt
</UL>

<P><STRONG><a name="[a8]"></a>string1</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, target.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lockt
</UL>

<P><STRONG><a name="[a9]"></a>string2</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, target.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToUP210
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lockt
</UL>

<P><STRONG><a name="[aa]"></a>string3</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, target.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lockt
</UL>

<P><STRONG><a name="[ab]"></a>lockt</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, target.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string3
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string2
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string1
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>

<P><STRONG><a name="[ad]"></a>JTAG_Wait</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = JTAG_Wait &rArr; GPIOPinTypeGPIOInput
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralDisable
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetInit
</UL>

<P><STRONG><a name="[b3]"></a>targetInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = targetInit &rArr; LCD_Init &rArr; PinoutSet &rArr; EPIPinConfigSet &rArr; CalcEPIDivider &rArr; EPIDividerFromRate
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlLDOSet
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_Wait
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbLedSet
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStart
</UL>

<P><STRONG><a name="[b8]"></a>usrZepRxCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usrZepRxCallback &rArr; dbgPrintNeighborTable &rArr; conPrintLADDR_bytes &rArr; conPrintUINT8_noleader &rArr; halPutch
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintNeighborTable
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepHandleRxPacket
</UL>

<P><STRONG><a name="[ba]"></a>datajudge</STRONG> (Thumb, 430 bytes, Stack size 8 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = datajudge &rArr; lcd &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToUP210
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrRxPacketCallback
</UL>

<P><STRONG><a name="[bd]"></a>AnalysisPacket</STRONG> (Thumb, 496 bytes, Stack size 88 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = AnalysisPacket &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrRxPacketCallback
</UL>

<P><STRONG><a name="[c2]"></a>usrRxPacketCallback</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = usrRxPacketCallback &rArr; AnalysisPacket &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintChar
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalysisPacket
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datajudge
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbLedSet
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsFSM
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsInjectPacket
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsRxFSM
</UL>

<P><STRONG><a name="[106]"></a>usrJoinVerifyCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFormatAssociationResponse
</UL>

<P><STRONG><a name="[c6]"></a>usrJoinNotifyCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usrJoinNotifyCallback &rArr; conPCRLF &rArr; conPrintROMString_func &rArr; halPutch
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPCRLF
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFormatAssociationResponse
</UL>

<P><STRONG><a name="[9a]"></a>usrSlowTimerInt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2B_ISR
</UL>

<P><STRONG><a name="[54]"></a>usrIntCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Port_J_ISR
</UL>

<P><STRONG><a name="[8]"></a>tickISRHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tickISRHandler &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>aplMacTicksToUs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, aps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halMacTicksToUs
</UL>

<P><STRONG><a name="[ce]"></a>apsRxBuffAdd</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, aps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = apsRxBuffAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUtilMemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsInjectPacket
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsRxFSM
</UL>

<P><STRONG><a name="[d3]"></a>apsRxBuffFull</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsFSM
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsRxFSM
</UL>

<P><STRONG><a name="[d6]"></a>apsTxData</STRONG> (Thumb, 670 bytes, Stack size 16 bytes, aps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = apsTxData &rArr; apsInjectTxPacket &rArr; apsRxFSM &rArr; usrRxPacketCallback &rArr; AnalysisPacket &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkGetHopsToDest
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkFSM
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsInjectTxPacket
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetMACTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsFSM
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsTxFSM
</UL>

<P><STRONG><a name="[e5]"></a>apsRxBusy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, aps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsFSM
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkRxFSM
</UL>

<P><STRONG><a name="[d9]"></a>apsFreeRxPacket</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, aps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = apsFreeRxPacket &rArr; MemFree &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsFSM
</UL>

<P><STRONG><a name="[dc]"></a>apsFSM</STRONG> (Thumb, 972 bytes, Stack size 8 bytes, aps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = apsFSM &rArr; apsTxFSM &rArr; apsTxData &rArr; apsInjectTxPacket &rArr; apsRxFSM &rArr; usrRxPacketCallback &rArr; AnalysisPacket &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepFmtPing
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepFmtNodeInfoRsp
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepFmtEndDeviceAnnounce
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepFmtAlarm
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepFSM
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkFSM
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbResolveBind
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbBindTableIterInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsFreeRxPacket
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsRxBusy
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsTxData
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsRxBuffFull
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsTxFSM
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsFormatAck
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsInjectPacket
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsRxFSM
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrRxPacketCallback
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUtilMemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aplFmtSendMSG
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aplShutdown
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskForm
</UL>

<P><STRONG><a name="[e6]"></a>aplShutdown</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, aps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsFSM
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halShutdown
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>

<P><STRONG><a name="[e7]"></a>aplWarmstart</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, aps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macWarmStartRadio
</UL>

<P><STRONG><a name="[b6]"></a>apsInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, aps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = apsInit &rArr; phyInit &rArr; MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetInit
</UL>

<P><STRONG><a name="[1d9]"></a>aplRegisterEndPoint</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, aps.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>aplFmtSendMSG</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, aps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsFSM
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetProcessorIEEEAddress
</UL>

<P><STRONG><a name="[129]"></a>apsRxHandoff</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, aps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkRxFSM
</UL>

<P><STRONG><a name="[1da]"></a>apsRxBuffInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, aps.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>apsRxBuffEmpty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, aps.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>apsGetRxPacket</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, aps.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>conPrintROMString_func</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = conPrintROMString_func &rArr; halPutch
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPutch
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintLADDR_bytes
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT32
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT16
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT8
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintNeighborTable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPCRLF
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitRadio
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintMacPacket
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintNwkPacket
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintApsPacket
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintAfPacket
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintMacPacketFCS
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintBeacon
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintMacCmd
</UL>

<P><STRONG><a name="[c7]"></a>conPCRLF</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conPCRLF &rArr; conPrintROMString_func &rArr; halPutch
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintROMString_func
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintNeighborTable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintConfig
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrJoinNotifyCallback
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintMacPacket
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintNwkPacket
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintApsPacket
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintAfPacket
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintBeacon
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintMacCmd
</UL>

<P><STRONG><a name="[a6]"></a>conPrintString</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = conPrintString &rArr; halPutch
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPutch
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToUP210
</UL>

<P><STRONG><a name="[c5]"></a>conPrintChar</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = conPrintChar &rArr; halPutch
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPutch
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrRxPacketCallback
</UL>

<P><STRONG><a name="[ee]"></a>conPrintUINT8_noleader</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conPrintUINT8_noleader &rArr; halPutch
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPutch
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintLADDR_bytes
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT32
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT16
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT8
</UL>

<P><STRONG><a name="[ef]"></a>conPrintUINT8</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = conPrintUINT8 &rArr; conPrintUINT8_noleader &rArr; halPutch
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT8_noleader
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintROMString_func
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintNeighborTable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintMacPacket
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintNwkPacket
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintApsPacket
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintAfPacket
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintMacPacketFCS
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintBeacon
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintMacCmd
</UL>

<P><STRONG><a name="[f0]"></a>conPrintUINT16</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = conPrintUINT16 &rArr; conPrintUINT8_noleader &rArr; halPutch
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT8_noleader
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintROMString_func
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintNeighborTable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintMacPacket
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintNwkPacket
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintApsPacket
</UL>

<P><STRONG><a name="[f1]"></a>conPrintUINT32</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, console.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT8_noleader
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintROMString_func
</UL>

<P><STRONG><a name="[f2]"></a>conPrintLADDR_bytes</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = conPrintLADDR_bytes &rArr; conPrintUINT8_noleader &rArr; halPutch
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT8_noleader
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintROMString_func
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintLADDR
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintNeighborTable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintMacPacket
</UL>

<P><STRONG><a name="[f3]"></a>conPrintLADDR</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, console.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintLADDR_bytes
</UL>

<P><STRONG><a name="[b7]"></a>conPrintConfig</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = conPrintConfig &rArr; conPrintLADDR_bytes &rArr; conPrintUINT8_noleader &rArr; halPutch
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintLADDR_bytes
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT16
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT8
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPCRLF
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetProcessorIEEEAddress
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintROMString_func
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetInit
</UL>

<P><STRONG><a name="[f4]"></a>dbgPrintMacPacketFCS</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT8
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintROMString_func
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintMacPacket
</UL>

<P><STRONG><a name="[f5]"></a>dbgPrintAfPacket</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT8
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPCRLF
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintROMString_func
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintPacket
</UL>

<P><STRONG><a name="[f6]"></a>dbgPrintApsPacket</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT16
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT8
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPCRLF
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintROMString_func
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintPacket
</UL>

<P><STRONG><a name="[f7]"></a>dbgPrintNwkPacket</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT16
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT8
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPCRLF
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintROMString_func
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintPacket
</UL>

<P><STRONG><a name="[fa]"></a>dbgPrintMacPacket</STRONG> (Thumb, 1106 bytes, Stack size 48 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintLADDR_bytes
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT16
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT8
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPCRLF
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintROMString_func
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintMacPacketFCS
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintBeacon
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintMacCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintPacket
</UL>

<P><STRONG><a name="[fb]"></a>dbgPrintPacket</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintMacPacket
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintNwkPacket
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintApsPacket
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintAfPacket
</UL>

<P><STRONG><a name="[b9]"></a>dbgPrintNeighborTable</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dbgPrintNeighborTable &rArr; conPrintLADDR_bytes &rArr; conPrintUINT8_noleader &rArr; halPutch
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintLADDR_bytes
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT16
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT8
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPCRLF
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintROMString_func
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrZepRxCallback
</UL>

<P><STRONG><a name="[ea]"></a>macInit</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = macInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntInitAddressMap
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkFSM
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsInit
</UL>

<P><STRONG><a name="[e8]"></a>macWarmStartRadio</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, mac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halWarmstart
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetChannel
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetRadioShortAddr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetRadioPANID
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyFSM
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aplWarmstart
</UL>

<P><STRONG><a name="[fe]"></a>macSetPANID</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = macSetPANID &rArr; halSetRadioPANID &rArr; Write_RAM
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetRadioPANID
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macInitRadio
</UL>

<P><STRONG><a name="[ff]"></a>macInitRadio</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = macInitRadio &rArr; phyFSM &rArr; halSendPacket &rArr; halResetRadio &rArr; halInitRadio &rArr; halSetRadioIEEEAddress &rArr; Write_RAM
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetRadioShortAddr
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyFSM
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSetPANID
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkFSM
</UL>

<P><STRONG><a name="[1dd]"></a>macGetPANID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mac.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>macSetChannel</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = macSetChannel &rArr; halSetChannel &rArr; Write_ConfigureWord
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkFSM
</UL>

<P><STRONG><a name="[101]"></a>macSetShortAddr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = macSetShortAddr &rArr; ntAddOurselvesToAddressTable &rArr; ntNewAddressMapEntry &rArr; ntCheckAddressMapEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetRadioShortAddr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntAddOurselvesToAddressTable
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkFSM
</UL>

<P><STRONG><a name="[108]"></a>macFreeRxPacket</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = macFreeRxPacket &rArr; MemFree &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macRxFSM
</UL>

<P><STRONG><a name="[10d]"></a>macGetRxPacket</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macRxFSM
</UL>

<P><STRONG><a name="[10c]"></a>macRxBuffEmpty</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macRxFSM
</UL>

<P><STRONG><a name="[113]"></a>macFSM</STRONG> (Thumb, 1384 bytes, Stack size 16 bytes, mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = macFSM &rArr; macTxFSM &rArr; macTxData &rArr; phyFSM &rArr; halSendPacket &rArr; halResetRadio &rArr; halInitRadio &rArr; halSetRadioIEEEAddress &rArr; Write_RAM
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halMACTimerNowDelta
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetMACTimer
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetChannel
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyFSM
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntFindByLADDR
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macTxFSM
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macRxFSM
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFormatOrphanNotify
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFormatAssocRequest
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFormatCoordRealign
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFormatBeacon
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFormatAssociationResponse
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macTxData
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkFSM
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkTxData
</UL>

<P><STRONG><a name="[77]"></a>macTxCallback</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = macTxCallback &rArr; halGetMACTimer &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetMACTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSendPacket
</UL>

<P><STRONG><a name="[4c]"></a>macRxCallback</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, mac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbRadioIntCallback
</UL>

<P><STRONG><a name="[4d]"></a>macRxBuffFull</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbRadioIntCallback
</UL>

<P><STRONG><a name="[11b]"></a>memhdr_get_size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, memalloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemFree
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemAlloc
</UL>

<P><STRONG><a name="[11a]"></a>memhdr_set_size</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, memalloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemFree
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemAlloc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemInit
</UL>

<P><STRONG><a name="[118]"></a>MemInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, memalloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memhdr_set_size
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyInit
</UL>

<P><STRONG><a name="[4e]"></a>MemAlloc</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, memalloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemAlloc &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memhdr_set_size
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memhdr_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsInjectPacket
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsInjectTxPacket
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbRadioIntCallback
</UL>

<P><STRONG><a name="[50]"></a>MemFree</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, memalloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemFree &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memhdr_set_size
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memhdr_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsFreeRxPacket
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsInjectPacket
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsRxFSM
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbRadioIntCallback
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkRxFSM
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkFreeRxPacket
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFreeRxPacket
</UL>

<P><STRONG><a name="[1de]"></a>MemDump</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, memalloc.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>ntInitAddressMap</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, neighbor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntInitTable
</UL>

<P><STRONG><a name="[130]"></a>ntFindAddressByLADDR</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, neighbor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ntFindAddressByLADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbResolveBind
</UL>

<P><STRONG><a name="[11d]"></a>ntCheckAddressMapEntry</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, neighbor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ntCheckAddressMapEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntNewAddressMapEntry
</UL>

<P><STRONG><a name="[11c]"></a>ntNewAddressMapEntry</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, neighbor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ntNewAddressMapEntry &rArr; ntCheckAddressMapEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUtilMemCopy
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntCheckAddressMapEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepHandleEndDeviceAnnounce
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntAddOurselvesToAddressTable
</UL>

<P><STRONG><a name="[102]"></a>ntAddOurselvesToAddressTable</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, neighbor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ntAddOurselvesToAddressTable &rArr; ntNewAddressMapEntry &rArr; ntCheckAddressMapEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetProcessorIEEEAddress
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntNewAddressMapEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSetShortAddr
</UL>

<P><STRONG><a name="[12f]"></a>ntFindAddressBySADDR</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, neighbor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ntFindAddressBySADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbBindTableIterInit
</UL>

<P><STRONG><a name="[11f]"></a>ntGetCskip</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, neighbor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkGetHopsToDest
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkFindParentSADDR
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntInitAddressAssignment
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntGetMaxSADDR
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntAddNeighbor
</UL>

<P><STRONG><a name="[11e]"></a>ntGetMaxSADDR</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, neighbor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ntGetMaxSADDR
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntGetCskip
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkGetHopsToDest
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkFindParentSADDR
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntFindNewDst
</UL>

<P><STRONG><a name="[10a]"></a>ntFindBySADDR</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, neighbor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ntFindBySADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macCheckDataRejection
</UL>

<P><STRONG><a name="[105]"></a>ntFindByLADDR</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, neighbor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ntFindByLADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFSM
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macCheckDataRejection
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFormatAssociationResponse
</UL>

<P><STRONG><a name="[120]"></a>ntInitTable</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, neighbor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ntInitTable
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntInitAddressMap
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkFSM
</UL>

<P><STRONG><a name="[121]"></a>ntInitAddressAssignment</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, neighbor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ntInitAddressAssignment
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntGetCskip
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkFSM
</UL>

<P><STRONG><a name="[107]"></a>ntAddNeighbor</STRONG> (Thumb, 280 bytes, Stack size 20 bytes, neighbor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ntAddNeighbor
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntGetCskip
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFormatAssociationResponse
</UL>

<P><STRONG><a name="[122]"></a>ntFindNewDst</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, neighbor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ntFindNewDst &rArr; ntGetMaxSADDR
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntGetMaxSADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkTxData
</UL>

<P><STRONG><a name="[eb]"></a>nwkInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nwk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsInit
</UL>

<P><STRONG><a name="[123]"></a>nwkTxData</STRONG> (Thumb, 396 bytes, Stack size 16 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = nwkTxData &rArr; macFSM &rArr; macTxFSM &rArr; macTxData &rArr; phyFSM &rArr; halSendPacket &rArr; halResetRadio &rArr; halInitRadio &rArr; halSetRadioIEEEAddress &rArr; Write_RAM
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUtilMemCopy
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntFindNewDst
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFSM
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkFSM
</UL>

<P><STRONG><a name="[125]"></a>nwkCopyFwdPkt</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nwkCopyFwdPkt &rArr; nwkFreeRxPacket &rArr; MemFree &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkGetRxPacket
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkFreeRxPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkFSM
</UL>

<P><STRONG><a name="[d8]"></a>nwkFSM</STRONG> (Thumb, 410 bytes, Stack size 8 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = nwkFSM &rArr; nwkTxData &rArr; macFSM &rArr; macTxFSM &rArr; macTxData &rArr; phyFSM &rArr; halSendPacket &rArr; halResetRadio &rArr; halInitRadio &rArr; halSetRadioIEEEAddress &rArr; Write_RAM
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkCopyFwdPkt
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkTxData
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkRxFSM
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkRxBuffEmpty
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntInitAddressAssignment
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntInitTable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFSM
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSetShortAddr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macSetChannel
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macInitRadio
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsFSM
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsTxData
</UL>

<P><STRONG><a name="[110]"></a>nwkRxBusy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nwk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macRxFSM
</UL>

<P><STRONG><a name="[111]"></a>nwkRxHandoff</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nwk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macRxFSM
</UL>

<P><STRONG><a name="[12c]"></a>nwkFindParentSADDR</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nwkFindParentSADDR &rArr; ntGetMaxSADDR
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntGetMaxSADDR
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntGetCskip
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkGetHopsToDest
</UL>

<P><STRONG><a name="[d7]"></a>nwkGetHopsToDest</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nwkGetHopsToDest &rArr; nwkFindParentSADDR &rArr; ntGetMaxSADDR
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkFindParentSADDR
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntGetMaxSADDR
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntGetCskip
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsTxData
</UL>

<P><STRONG><a name="[e9]"></a>phyInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = phyInit &rArr; MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkFSM
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsInit
</UL>

<P><STRONG><a name="[4f]"></a>phyRxCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, phy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbRadioIntCallback
</UL>

<P><STRONG><a name="[75]"></a>phyTxStartCallBack</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = phyTxStartCallBack &rArr; halGetMACTimer &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetMACTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSendPacket
</UL>

<P><STRONG><a name="[76]"></a>phyTxEndCallBack</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, phy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSendPacket
</UL>

<P><STRONG><a name="[fd]"></a>phyFSM</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = phyFSM &rArr; halSendPacket &rArr; halResetRadio &rArr; halInitRadio &rArr; halSetRadioIEEEAddress &rArr; Write_RAM
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halIdle
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halMACTimerNowDelta
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSendPacket
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitRadio
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macWarmStartRadio
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFSM
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macInitRadio
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macTxData
</UL>

<P><STRONG><a name="[de]"></a>evbBindTableIterInit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, staticbind.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = evbBindTableIterInit &rArr; ntFindAddressBySADDR
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntFindAddressBySADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsFSM
</UL>

<P><STRONG><a name="[e4]"></a>evbResolveBind</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, staticbind.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = evbResolveBind &rArr; ntFindAddressByLADDR
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntFindAddressByLADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsFSM
</UL>

<P><STRONG><a name="[ec]"></a>zepInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, zep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsInit
</UL>

<P><STRONG><a name="[dd]"></a>zepFSM</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, zep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = zepFSM &rArr; halMACTimerNowDelta &rArr; halGetMACTimer &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halMACTimerNowDelta
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetMACTimer
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbLedGet
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbLedSet
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsFSM
</UL>

<P><STRONG><a name="[d4]"></a>zepHandleRxPacket</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, zep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = zepHandleRxPacket &rArr; usrZepRxCallback &rArr; dbgPrintNeighborTable &rArr; conPrintLADDR_bytes &rArr; conPrintUINT8_noleader &rArr; halPutch
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrZepRxCallback
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetMACTimer
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbLedGet
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbLedSet
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepHandleEndDeviceAnnounce
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsInjectPacket
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsRxFSM
</UL>

<P><STRONG><a name="[e1]"></a>zepFmtPing</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, zep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = zepFmtPing
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepCommonFmt
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsFSM
</UL>

<P><STRONG><a name="[e2]"></a>zepFmtAlarm</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, zep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = zepFmtAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepCommonFmt
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsFSM
</UL>

<P><STRONG><a name="[df]"></a>zepFmtEndDeviceAnnounce</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, zep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = zepFmtEndDeviceAnnounce
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetProcessorIEEEAddress
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepCommonFmt
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsFSM
</UL>

<P><STRONG><a name="[e0]"></a>zepFmtNodeInfoRsp</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, zep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = zepFmtNodeInfoRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetProcessorIEEEAddress
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepCommonFmt
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsFSM
</UL>

<P><STRONG><a name="[133]"></a>OSTaskCreate</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStart
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>

<P><STRONG><a name="[137]"></a>OSTaskResume</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[138]"></a>OSTaskSuspend</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStart
</UL>

<P><STRONG><a name="[139]"></a>OS_TaskIdle</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[13c]"></a>OSInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1df]"></a>OSIntEnter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>OSIntExit</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickISRHandler
</UL>

<P><STRONG><a name="[144]"></a>OSSchedLock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>

<P><STRONG><a name="[136]"></a>OS_Sched</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[146]"></a>OSSchedUnlock</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[147]"></a>OSStart</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>OSTimeTick</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickISRHandler
</UL>

<P><STRONG><a name="[1e0]"></a>OSVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>OS_TCBInit</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[13d]"></a>OSInitHookBegin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[142]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[14b]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[1e1]"></a>OSTaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[1e2]"></a>OSTaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>OSTaskStkInit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[1a]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(UCOSII_ASM)
</UL>
<P><STRONG><a name="[14a]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[149]"></a>OSTimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[9e]"></a>Kitronix320x240x16_SSD2119Init</STRONG> (Thumb, 656 bytes, Stack size 16 bytes, kitronix320x240x16_ssd2119_8bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Kitronix320x240x16_SSD2119Init &rArr; InitSRAMDaughterLCDInterface &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFPGADaughterLCDInterface
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSRAMDaughterLCDInterface
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPIOLCDInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[9d]"></a>PinoutSet</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, set_pinout.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = PinoutSet &rArr; EPIPinConfigSet &rArr; CalcEPIDivider &rArr; EPIDividerFromRate
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortControlSet
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPIPinConfigSet
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaughterBoardTypeGet
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[36]"></a>main</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intDisAll
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[93]"></a>isprint</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isprint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isprint &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_ISR
</UL>

<P><STRONG><a name="[9c]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datajudge
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string3
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string2
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string1
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToUP210
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[16d]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[2b]"></a>_printf_int_dec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[c1]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalysisPacket
</UL>

<P><STRONG><a name="[bc]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datajudge
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrRxPacketCallback
</UL>

<P><STRONG><a name="[170]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1e3]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemInit
</UL>

<P><STRONG><a name="[172]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1e4]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrRxPacketCallback
</UL>

<P><STRONG><a name="[1e5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1e7]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isprint
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[174]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __read_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[176]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[16f]"></a>_printf_int_common</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[16c]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[14]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[179]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[171]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1ea]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[175]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1ed]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[19]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[17]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[18]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[1ef]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1f0]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[180]"></a>_scanf_really_real</STRONG> (Thumb, 672 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[37]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[19c]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[17d]"></a>_btod_etento</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[188]"></a>_scanf_really_hex_real</STRONG> (Thumb, 776 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[1af]"></a>_scanf_really_infnan</STRONG> (Thumb, 298 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[3b]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[18a]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[1f1]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[1f2]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1f4]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>_e2d</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[18d]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[187]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[17f]"></a>_btod_edivd</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[186]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[17e]"></a>_btod_emuld</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[18f]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[c8]"></a>OS_ENTER_CRITICAL</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickISRHandler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[c9]"></a>OS_EXIT_CRITICAL</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickISRHandler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[148]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[145]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[143]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[7]"></a>OSPendSV</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16a]"></a>intDisAll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[168]"></a>EPIAddressMapSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, epi.o(i.EPIAddressMapSet))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPIPinConfigSet
</UL>

<P><STRONG><a name="[167]"></a>EPIConfigGPModeSet</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, epi.o(i.EPIConfigGPModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPIPinConfigSet
</UL>

<P><STRONG><a name="[166]"></a>EPIConfigHB8Set</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, epi.o(i.EPIConfigHB8Set))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPIPinConfigSet
</UL>

<P><STRONG><a name="[164]"></a>EPIConfigSDRAMSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, epi.o(i.EPIConfigSDRAMSet))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPIPinConfigSet
</UL>

<P><STRONG><a name="[161]"></a>EPIDividerSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, epi.o(i.EPIDividerSet))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPIPinConfigSet
</UL>

<P><STRONG><a name="[162]"></a>EPIModeSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, epi.o(i.EPIModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPIPinConfigSet
</UL>

<P><STRONG><a name="[14d]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2C
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPIPinConfigSet
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPIOLCDInterface
</UL>

<P><STRONG><a name="[46]"></a>GPIOIntTypeSet</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntTypeSet))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOJ_IntInit
</UL>

<P><STRONG><a name="[14e]"></a>GPIOPadConfigSet</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2C
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPIPinConfigSet
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPIOLCDInterface
</UL>

<P><STRONG><a name="[53]"></a>GPIOPinIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Port_J_ISR
</UL>

<P><STRONG><a name="[47]"></a>GPIOPinIntEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOJ_IntInit
</UL>

<P><STRONG><a name="[52]"></a>GPIOPinIntStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Port_J_ISR
</UL>

<P><STRONG><a name="[5a]"></a>GPIOPinRead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinRead))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_Wait
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSendPacket
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doIEEE_backoff
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbLedGet
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbIntCallback
</UL>

<P><STRONG><a name="[43]"></a>GPIOPinTypeGPIOInput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeGPIOInput
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinoutSet
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_Wait
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiInit
</UL>

<P><STRONG><a name="[42]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinoutSet
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiInit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSRAMDaughterLCDInterface
</UL>

<P><STRONG><a name="[15d]"></a>GPIOPinTypeI2C</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeI2C
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaughterBoardTypeGet
</UL>

<P><STRONG><a name="[40]"></a>GPIOPinTypeSSI</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeSSI
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiInit
</UL>

<P><STRONG><a name="[85]"></a>GPIOPinTypeUART</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeUART
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitUart
</UL>

<P><STRONG><a name="[4a]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinoutSet
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_TXFIFO
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_RAM
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Status
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RXFIFO
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halResetRadio
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitRadio
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halDisableRadio
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbLedSet
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbInit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbRadioIntCallback
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSRAMDaughterLCDInterface
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPIOLCDInterface
</UL>

<P><STRONG><a name="[9f]"></a>GrContextInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context.o(i.GrContextInit))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[190]"></a>GrLineDrawH</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, line.o(i.GrLineDrawH))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GrLineDrawH
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrStringDraw
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrRectDraw
</UL>

<P><STRONG><a name="[191]"></a>GrLineDrawV</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, line.o(i.GrLineDrawV))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GrLineDrawV
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrRectDraw
</UL>

<P><STRONG><a name="[a1]"></a>GrRectDraw</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rectangle.o(i.GrRectDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GrRectDraw &rArr; GrLineDrawV
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrLineDrawV
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrLineDrawH
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[a0]"></a>GrRectFill</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, rectangle.o(i.GrRectFill))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GrRectFill
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[a3]"></a>GrStringDraw</STRONG> (Thumb, 678 bytes, Stack size 88 bytes, string.o(i.GrStringDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GrStringDraw &rArr; GrLineDrawH
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrLineDrawH
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[a2]"></a>GrStringWidthGet</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, string.o(i.GrStringWidthGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GrStringWidthGet
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[155]"></a>I2CMasterControl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterControl))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadPolled
</UL>

<P><STRONG><a name="[15a]"></a>I2CMasterDataGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterDataGet))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadPolled
</UL>

<P><STRONG><a name="[154]"></a>I2CMasterDataPut</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterDataPut))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadPolled
</UL>

<P><STRONG><a name="[15c]"></a>I2CMasterEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterEnable))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaughterBoardTypeGet
</UL>

<P><STRONG><a name="[157]"></a>I2CMasterErr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterErr))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadPolled
</UL>

<P><STRONG><a name="[159]"></a>I2CMasterInitExpClk</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterInitExpClk))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaughterBoardTypeGet
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadPolled
</UL>

<P><STRONG><a name="[152]"></a>I2CMasterIntClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadPolled
</UL>

<P><STRONG><a name="[156]"></a>I2CMasterIntStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadPolled
</UL>

<P><STRONG><a name="[153]"></a>I2CMasterSlaveAddrSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterSlaveAddrSet))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadPolled
</UL>

<P><STRONG><a name="[67]"></a>IntDisable</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, interrupt.o(i.IntDisable), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halDisableRadio
</UL>

<P><STRONG><a name="[48]"></a>IntEnable</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitUart
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitRadio
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOJ_IntInit
</UL>

<P><STRONG><a name="[60]"></a>IntMasterDisable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aplShutdown
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetMACTimer
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemFree
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemAlloc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSendPacket
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halFlushRXFIFO
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitRadio
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetChannel
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetRadioIEEEAddress
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetRadioShortAddr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetRadioPANID
</UL>

<P><STRONG><a name="[62]"></a>IntMasterEnable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitUart
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetMACTimer
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemFree
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemAlloc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSendPacket
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halFlushRXFIFO
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitRadio
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetChannel
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetRadioIEEEAddress
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetRadioShortAddr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSetRadioPANID
</UL>

<P><STRONG><a name="[41]"></a>SSIConfigSetExpClk</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ssi.o(i.SSIConfigSetExpClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSIConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiInit
</UL>

<P><STRONG><a name="[7a]"></a>SSIDataGet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssi.o(i.SSIDataGet))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGet
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataGet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Byte_RXFIFO
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Status
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RXFIFO
</UL>

<P><STRONG><a name="[78]"></a>SSIDataPut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssi.o(i.SSIDataPut))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Byte_RXFIFO
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_TXFIFO
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_RAM
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ConfigureWord
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RXFIFO
</UL>

<P><STRONG><a name="[44]"></a>SSIEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIEnable))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiInit
</UL>

<P><STRONG><a name="[3e]"></a>SysCtlClockGet</STRONG> (Thumb, 438 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinoutSet
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kitronix320x240x16_SSD2119Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitUart
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiInit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPIPinConfigSet
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaughterBoardTypeGet
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadPolled
</UL>

<P><STRONG><a name="[b5]"></a>SysCtlClockSet</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, sysctl.o(i.SysCtlClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetInit
</UL>

<P><STRONG><a name="[b4]"></a>SysCtlLDOSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlLDOSet))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetInit
</UL>

<P><STRONG><a name="[ae]"></a>SysCtlPeripheralDisable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralDisable))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_Wait
</UL>

<P><STRONG><a name="[3f]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinoutSet
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_Wait
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitUart
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssiInit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPIPinConfigSet
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaughterBoardTypeGet
</UL>

<P><STRONG><a name="[158]"></a>SysCtlPeripheralReset</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, sysctl.o(i.SysCtlPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysCtlPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaughterBoardTypeGet
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadPolled
</UL>

<P><STRONG><a name="[98]"></a>SysCtlSleep</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlSleep), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUwfi
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSleep
</UL>

<P><STRONG><a name="[b1]"></a>SysTickEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickEnable))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickInit
</UL>

<P><STRONG><a name="[b2]"></a>SysTickIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickInit
</UL>

<P><STRONG><a name="[b0]"></a>SysTickPeriodSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickInit
</UL>

<P><STRONG><a name="[7d]"></a>TimerConfigure</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer.o(i.TimerConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2Init
</UL>

<P><STRONG><a name="[81]"></a>TimerEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.TimerEnable))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitMACTimer
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2Init
</UL>

<P><STRONG><a name="[99]"></a>TimerIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i.TimerIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2B_ISR
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0B_ISR
</UL>

<P><STRONG><a name="[95]"></a>TimerIntDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.TimerIntDisable), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halShutdown
</UL>

<P><STRONG><a name="[80]"></a>TimerIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TimerIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halWarmstart
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2Init
</UL>

<P><STRONG><a name="[7f]"></a>TimerLoadSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerLoadSet))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2Init
</UL>

<P><STRONG><a name="[7e]"></a>TimerPrescaleSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerPrescaleSet))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2Init
</UL>

<P><STRONG><a name="[58]"></a>TimerValueGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.TimerValueGet))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetMACTimer
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbInitRandomSeed
</UL>

<P><STRONG><a name="[92]"></a>UARTCharGetNonBlocking</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(i.UARTCharGetNonBlocking))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_ISR
</UL>

<P><STRONG><a name="[8d]"></a>UARTCharPut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.UARTCharPut))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_ISR
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halRawPut
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halPutch
</UL>

<P><STRONG><a name="[91]"></a>UARTCharsAvail</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTCharsAvail))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_ISR
</UL>

<P><STRONG><a name="[86]"></a>UARTConfigSetExpClk</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, uart.o(i.UARTConfigSetExpClk))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitUart
</UL>

<P><STRONG><a name="[87]"></a>UARTEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(i.UARTEnable))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitUart
</UL>

<P><STRONG><a name="[88]"></a>UARTFIFOLevelSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.UARTFIFOLevelSet))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitUart
</UL>

<P><STRONG><a name="[90]"></a>UARTIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(i.UARTIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_ISR
</UL>

<P><STRONG><a name="[89]"></a>UARTIntDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitUart
</UL>

<P><STRONG><a name="[8a]"></a>UARTIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.UARTIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halInitUart
</UL>

<P><STRONG><a name="[8f]"></a>UARTIntStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_ISR
</UL>

<P><STRONG><a name="[195]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[184]"></a>__mathlib_narrow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_narrow &rArr; __mathlib_tofloat &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[197]"></a>__mathlib_tofloat</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, narrow.o(i.__mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_tofloat &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[18b]"></a>__support_ldexp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[183]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[be]"></a>atof</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalysisPacket
</UL>

<P><STRONG><a name="[198]"></a>frexp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frexp
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[19b]"></a>ldexp</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[15]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalysisPacket
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[19d]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1a0]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[1a3]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[199]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[1a2]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalysisPacket
</UL>

<P><STRONG><a name="[1a4]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1f5]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[1a5]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1a7]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[19f]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[19a]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_tofloat
</UL>

<P><STRONG><a name="[1a6]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[1ab]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lockt
</UL>

<P><STRONG><a name="[1a8]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1f6]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[1aa]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1ad]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[1a9]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[19e]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datajudge
</UL>

<P><STRONG><a name="[1ac]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[1a1]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[196]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[178]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[182]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[181]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1ae]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>tickInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tickInit &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntEnable
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetInit
</UL>

<P><STRONG><a name="[d2]"></a>apsCheckAck</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, aps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsRxFSM
</UL>

<P><STRONG><a name="[d1]"></a>apsParseHdr</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, aps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsRxFSM
</UL>

<P><STRONG><a name="[d0]"></a>apsRxFSM</STRONG> (Thumb, 428 bytes, Stack size 8 bytes, aps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = apsRxFSM &rArr; usrRxPacketCallback &rArr; AnalysisPacket &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepHandleRxPacket
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsRxBuffFull
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsRxBuffAdd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsParseHdr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsCheckAck
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrRxPacketCallback
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsFSM
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsInjectTxPacket
</UL>

<P><STRONG><a name="[d5]"></a>apsInjectTxPacket</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, aps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = apsInjectTxPacket &rArr; apsRxFSM &rArr; usrRxPacketCallback &rArr; AnalysisPacket &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsRxFSM
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halUtilMemCopy
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsTxData
</UL>

<P><STRONG><a name="[da]"></a>apsInjectPacket</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, aps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = apsInjectPacket &rArr; usrRxPacketCallback &rArr; AnalysisPacket &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepHandleRxPacket
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsRxBuffAdd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrRxPacketCallback
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemFree
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsFSM
</UL>

<P><STRONG><a name="[e3]"></a>apsFormatAck</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, aps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsFSM
</UL>

<P><STRONG><a name="[db]"></a>apsTxFSM</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, aps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = apsTxFSM &rArr; apsTxData &rArr; apsInjectTxPacket &rArr; apsRxFSM &rArr; usrRxPacketCallback &rArr; AnalysisPacket &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsTxData
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halMACTimerNowDelta
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetMACTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsFSM
</UL>

<P><STRONG><a name="[f8]"></a>dbgPrintMacCmd</STRONG> (Thumb, 440 bytes, Stack size 16 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT8
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPCRLF
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintROMString_func
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintMacPacket
</UL>

<P><STRONG><a name="[f9]"></a>dbgPrintBeacon</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintUINT8
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPCRLF
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conPrintROMString_func
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbgPrintMacPacket
</UL>

<P><STRONG><a name="[103]"></a>macTxData</STRONG> (Thumb, 528 bytes, Stack size 16 bytes, mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = macTxData &rArr; phyFSM &rArr; halSendPacket &rArr; halResetRadio &rArr; halInitRadio &rArr; halSetRadioIEEEAddress &rArr; Write_RAM
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetProcessorIEEEAddress
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetRandomByte
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyFSM
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFSM
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macTxFSM
</UL>

<P><STRONG><a name="[104]"></a>macFormatAssociationResponse</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = macFormatAssociationResponse &rArr; usrJoinNotifyCallback &rArr; conPCRLF &rArr; conPrintROMString_func &rArr; halPutch
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrJoinNotifyCallback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usrJoinVerifyCallback
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntFindByLADDR
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntAddNeighbor
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFSM
</UL>

<P><STRONG><a name="[117]"></a>macFormatBeacon</STRONG> (Thumb, 278 bytes, Stack size 0 bytes, mac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFSM
</UL>

<P><STRONG><a name="[116]"></a>macFormatCoordRealign</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, mac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFSM
</UL>

<P><STRONG><a name="[115]"></a>macFormatAssocRequest</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFSM
</UL>

<P><STRONG><a name="[114]"></a>macFormatOrphanNotify</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFSM
</UL>

<P><STRONG><a name="[109]"></a>macCheckDataRejection</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = macCheckDataRejection &rArr; ntFindByLADDR
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntFindBySADDR
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntFindByLADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macRxFSM
</UL>

<P><STRONG><a name="[10f]"></a>macParseBeacon</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, mac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macRxFSM
</UL>

<P><STRONG><a name="[10e]"></a>macParseHdr</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = macParseHdr
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macRxFSM
</UL>

<P><STRONG><a name="[10b]"></a>macRxFSM</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = macRxFSM &rArr; macFreeRxPacket &rArr; MemFree &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halGetMACTimer
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkRxHandoff
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkRxBusy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macRxBuffEmpty
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macGetRxPacket
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFreeRxPacket
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macParseHdr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macParseBeacon
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macCheckDataRejection
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFSM
</UL>

<P><STRONG><a name="[112]"></a>macTxFSM</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = macTxFSM &rArr; macTxData &rArr; phyFSM &rArr; halSendPacket &rArr; halResetRadio &rArr; halInitRadio &rArr; halSetRadioIEEEAddress &rArr; Write_RAM
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halMACTimerNowDelta
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macTxData
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macFSM
</UL>

<P><STRONG><a name="[124]"></a>nwkFreeRxPacket</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nwkFreeRxPacket &rArr; MemFree &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkCopyFwdPkt
</UL>

<P><STRONG><a name="[126]"></a>nwkGetRxPacket</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nwk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkCopyFwdPkt
</UL>

<P><STRONG><a name="[12b]"></a>nwkRxBuffEmpty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nwk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkFSM
</UL>

<P><STRONG><a name="[12a]"></a>nwkRxBuffFull</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nwk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkRxFSM
</UL>

<P><STRONG><a name="[128]"></a>nwkParseHdr</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nwk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkRxFSM
</UL>

<P><STRONG><a name="[127]"></a>nwkRxFSM</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nwkRxFSM &rArr; MemFree &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsRxHandoff
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsRxBusy
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemFree
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkParseHdr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkRxBuffFull
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwkFSM
</UL>

<P><STRONG><a name="[131]"></a>zepHandleEndDeviceAnnounce</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, zep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = zepHandleEndDeviceAnnounce &rArr; ntNewAddressMapEntry &rArr; ntCheckAddressMapEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntNewAddressMapEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepHandleRxPacket
</UL>

<P><STRONG><a name="[132]"></a>zepCommonFmt</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, zep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepFmtPing
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepFmtNodeInfoRsp
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepFmtEndDeviceAnnounce
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zepFmtAlarm
</UL>

<P><STRONG><a name="[13b]"></a>OS_InitTaskIdle</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[141]"></a>OS_InitEventList</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[140]"></a>OS_InitTCBList</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[13f]"></a>OS_InitRdyList</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[13e]"></a>OS_InitMisc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[22]"></a>WriteDataGPIO</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, kitronix320x240x16_ssd2119_8bit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> kitronix320x240x16_ssd2119_8bit.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>WriteDataEPI</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, kitronix320x240x16_ssd2119_8bit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> kitronix320x240x16_ssd2119_8bit.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>WriteCommandEPI</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, kitronix320x240x16_ssd2119_8bit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> kitronix320x240x16_ssd2119_8bit.o(.text)
</UL>
<P><STRONG><a name="[10]"></a>WriteDataFPGA</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, kitronix320x240x16_ssd2119_8bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteDataFPGA
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kitronix320x240x16_ssd2119_8bit.o(.text)
</UL>
<P><STRONG><a name="[11]"></a>WriteCommandFPGA</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, kitronix320x240x16_ssd2119_8bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteCommandFPGA
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kitronix320x240x16_ssd2119_8bit.o(.text)
</UL>
<P><STRONG><a name="[23]"></a>WriteCommandGPIO</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, kitronix320x240x16_ssd2119_8bit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> kitronix320x240x16_ssd2119_8bit.o(.data)
</UL>
<P><STRONG><a name="[14c]"></a>InitGPIOLCDInterface</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, kitronix320x240x16_ssd2119_8bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitGPIOLCDInterface
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kitronix320x240x16_SSD2119Init
</UL>

<P><STRONG><a name="[14f]"></a>InitSRAMDaughterLCDInterface</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, kitronix320x240x16_ssd2119_8bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InitSRAMDaughterLCDInterface &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kitronix320x240x16_SSD2119Init
</UL>

<P><STRONG><a name="[150]"></a>InitFPGADaughterLCDInterface</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, kitronix320x240x16_ssd2119_8bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitFPGADaughterLCDInterface
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kitronix320x240x16_SSD2119Init
</UL>

<P><STRONG><a name="[1b]"></a>Kitronix320x240x16_SSD2119PixelDraw</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, kitronix320x240x16_ssd2119_8bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Kitronix320x240x16_SSD2119PixelDraw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kitronix320x240x16_ssd2119_8bit.o(.constdata)
</UL>
<P><STRONG><a name="[1c]"></a>Kitronix320x240x16_SSD2119PixelDrawMultiple</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, kitronix320x240x16_ssd2119_8bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Kitronix320x240x16_SSD2119PixelDrawMultiple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kitronix320x240x16_ssd2119_8bit.o(.constdata)
</UL>
<P><STRONG><a name="[1d]"></a>Kitronix320x240x16_SSD2119LineDrawH</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, kitronix320x240x16_ssd2119_8bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Kitronix320x240x16_SSD2119LineDrawH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kitronix320x240x16_ssd2119_8bit.o(.constdata)
</UL>
<P><STRONG><a name="[1e]"></a>Kitronix320x240x16_SSD2119LineDrawV</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, kitronix320x240x16_ssd2119_8bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Kitronix320x240x16_SSD2119LineDrawV
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kitronix320x240x16_ssd2119_8bit.o(.constdata)
</UL>
<P><STRONG><a name="[1f]"></a>Kitronix320x240x16_SSD2119RectFill</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, kitronix320x240x16_ssd2119_8bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Kitronix320x240x16_SSD2119RectFill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kitronix320x240x16_ssd2119_8bit.o(.constdata)
</UL>
<P><STRONG><a name="[20]"></a>Kitronix320x240x16_SSD2119ColorTranslate</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, kitronix320x240x16_ssd2119_8bit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> kitronix320x240x16_ssd2119_8bit.o(.constdata)
</UL>
<P><STRONG><a name="[21]"></a>Kitronix320x240x16_SSD2119Flush</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kitronix320x240x16_ssd2119_8bit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> kitronix320x240x16_ssd2119_8bit.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>EEPROMReadPolled</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, set_pinout.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EEPROMReadPolled &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterSlaveAddrSet
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterIntStatus
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterIntClear
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterInitExpClk
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterErr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataGet
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DaughterBoardTypeGet
</UL>

<P><STRONG><a name="[15b]"></a>DaughterBoardTypeGet</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, set_pinout.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DaughterBoardTypeGet &rArr; EEPROMReadPolled &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterInitExpClk
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterEnable
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2C
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadPolled
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinoutSet
</UL>

<P><STRONG><a name="[15f]"></a>EPIDividerFromRate</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, set_pinout.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EPIDividerFromRate
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcEPIDivider
</UL>

<P><STRONG><a name="[15e]"></a>CalcEPIDivider</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, set_pinout.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CalcEPIDivider &rArr; EPIDividerFromRate
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPIDividerFromRate
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPIPinConfigSet
</UL>

<P><STRONG><a name="[165]"></a>HB8ConfigGet</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, set_pinout.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HB8ConfigGet
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPIPinConfigSet
</UL>

<P><STRONG><a name="[163]"></a>SDRAMConfigGet</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, set_pinout.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDRAMConfigGet
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPIPinConfigSet
</UL>

<P><STRONG><a name="[160]"></a>EPIPinConfigSet</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, set_pinout.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = EPIPinConfigSet &rArr; CalcEPIDivider &rArr; EPIDividerFromRate
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPIModeSet
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPIDividerSet
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPIConfigSDRAMSet
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPIConfigHB8Set
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPIConfigGPModeSet
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPIAddressMapSet
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAMConfigGet
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HB8ConfigGet
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcEPIDivider
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinoutSet
</UL>

<P><STRONG><a name="[169]"></a>PortControlSet</STRONG> (Thumb, 170 bytes, Stack size 44 bytes, set_pinout.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PortControlSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinoutSet
</UL>

<P><STRONG><a name="[12]"></a>taskForm</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = taskForm &rArr; apsFSM &rArr; apsTxFSM &rArr; apsTxData &rArr; apsInjectTxPacket &rArr; apsRxFSM &rArr; usrRxPacketCallback &rArr; AnalysisPacket &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apsFSM
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evbLedSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>taskStart</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = taskStart &rArr; targetInit &rArr; LCD_Init &rArr; PinoutSet &rArr; EPIPinConfigSet &rArr; CalcEPIDivider &rArr; EPIDividerFromRate
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;targetInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[16]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[177]"></a>_local_sscanf</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[17c]"></a>_fp_value</STRONG> (Thumb, 504 bytes, Stack size 88 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
